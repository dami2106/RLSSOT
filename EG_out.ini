========================
Calculating test metrics:
Segments shape: torch.Size([1, 7])
GT shape: torch.Size([1, 7])
Mask shape: torch.Size([1, 7])

Segments: tensor([[0, 0, 0, 1, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 0, 1, 1, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True]], device='cuda:0')

CLS None
========================
/home/dami/anaconda3/envs/SOTA/lib/python3.10/site-packages/pytorch_lightning/utilities/data.py:78: Trying to infer the `batch_size` from an ambiguous collection. The batch size we found is 1. To avoid any miscalculations, use `self.log(..., batch_size=batch_size)`.
Testing DataLoader 0:   6%|█████████▎                                                                                                                                           | 1/16 [00:00<00:00, 15.43it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 12])
GT shape: torch.Size([1, 12])
Mask shape: torch.Size([1, 12])

Segments: tensor([[0, 0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[2, 2, 2, 1, 1, 1, 1, 0, 0, 0, 0, 0]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  12%|██████████████████▋                                                                                                                                  | 2/16 [00:00<00:00, 15.02it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 8])
GT shape: torch.Size([1, 8])
Mask shape: torch.Size([1, 8])

Segments: tensor([[0, 0, 1, 1, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[2, 2, 0, 0, 0, 0, 1, 1]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True]], device='cuda:0')

CLS None
========================
Testing DataLoader 0:  19%|███████████████████████████▉                                                                                                                         | 3/16 [00:00<00:00, 15.43it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 11])
GT shape: torch.Size([1, 11])
Mask shape: torch.Size([1, 11])

Segments: tensor([[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 0, 2, 2, 2, 1, 1, 1, 1]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  25%|█████████████████████████████████████▎                                                                                                               | 4/16 [00:00<00:00, 16.32it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 12])
GT shape: torch.Size([1, 12])
Mask shape: torch.Size([1, 12])

Segments: tensor([[0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  31%|██████████████████████████████████████████████▌                                                                                                      | 5/16 [00:00<00:00, 16.86it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 8])
GT shape: torch.Size([1, 8])
Mask shape: torch.Size([1, 8])

Segments: tensor([[0, 0, 1, 1, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[1, 1, 0, 0, 0, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True]], device='cuda:0')

CLS None
========================
Testing DataLoader 0:  38%|███████████████████████████████████████████████████████▉                                                                                             | 6/16 [00:00<00:00, 17.22it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 5])
GT shape: torch.Size([1, 5])
Mask shape: torch.Size([1, 5])

Segments: tensor([[0, 1, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 1, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True]], device='cuda:0')

CLS None
========================
Testing DataLoader 0:  44%|█████████████████████████████████████████████████████████████████▏                                                                                   | 7/16 [00:00<00:00, 17.49it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 12])
GT shape: torch.Size([1, 12])
Mask shape: torch.Size([1, 12])

Segments: tensor([[0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 0, 0, 1, 1, 1, 2, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  50%|██████████████████████████████████████████████████████████████████████████▌                                                                          | 8/16 [00:00<00:00, 18.14it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 8])
GT shape: torch.Size([1, 8])
Mask shape: torch.Size([1, 8])

Segments: tensor([[0, 0, 0, 1, 1, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 2, 2, 2, 2, 1]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True]], device='cuda:0')

CLS None
========================
Testing DataLoader 0:  56%|███████████████████████████████████████████████████████████████████████████████████▊                                                                 | 9/16 [00:00<00:00, 18.72it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 11])
GT shape: torch.Size([1, 11])
Mask shape: torch.Size([1, 11])

Segments: tensor([[0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[2, 2, 2, 2, 2, 2, 0, 0, 0, 1, 1]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  62%|████████████████████████████████████████████████████████████████████████████████████████████▌                                                       | 10/16 [00:00<00:00, 19.22it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 11])
GT shape: torch.Size([1, 11])
Mask shape: torch.Size([1, 11])

Segments: tensor([[0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  69%|█████████████████████████████████████████████████████████████████████████████████████████████████████▊                                              | 11/16 [00:00<00:00, 19.70it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 9])
GT shape: torch.Size([1, 9])
Mask shape: torch.Size([1, 9])

Segments: tensor([[0, 0, 1, 1, 1, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[1, 1, 1, 1, 2, 0, 0, 0, 0]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  75%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████                                     | 12/16 [00:00<00:00, 20.07it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 8])
GT shape: torch.Size([1, 8])
Mask shape: torch.Size([1, 8])

Segments: tensor([[0, 1, 1, 2, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 1, 2, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True]], device='cuda:0')

CLS None
========================
Testing DataLoader 0:  81%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▎                           | 13/16 [00:00<00:00, 20.56it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 11])
GT shape: torch.Size([1, 11])
Mask shape: torch.Size([1, 11])

Segments: tensor([[0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2]], device='cuda:0')
GT: tensor([[0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================
Testing DataLoader 0:  88%|█████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▌                  | 14/16 [00:00<00:00, 21.01it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 13])
GT shape: torch.Size([1, 13])
Mask shape: torch.Size([1, 13])

Segments: tensor([[0, 0, 0, 0, 0, 0, 1, 2, 2, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 0, 0, 0]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True, True,
         True]], device='cuda:0')

CLS None
========================
Testing DataLoader 0:  94%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████▊         | 15/16 [00:00<00:00, 21.20it/s]========================
Calculating test metrics:
Segments shape: torch.Size([1, 11])
GT shape: torch.Size([1, 11])
Mask shape: torch.Size([1, 11])

Segments: tensor([[0, 0, 0, 0, 1, 1, 2, 2, 2, 2, 2]], device='cuda:0')
GT: tensor([[2, 2, 2, 2, 2, 2, 0, 1, 1, 1, 1]], device='cuda:0')
Mask: tensor([[True, True, True, True, True, True, True, True, True, True, True]],
       device='cuda:0')

CLS None
========================

test_f1_full          0.4455319344997406
test_f1_per          0.7458333969116211
test_miou_full         0.2993195652961731
test_miou_per         0.6798610687255859
test_mof_full         0.46496814489364624
test_mof_per          0.8228394985198975